/* https://leetcode.com/problems/find-the-difference/

Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
*/
public class Solution {
    public char findTheDifference(String s, String t) {
        char[] first = s.toCharArray();
        char[] second = t.toCharArray();
        
        Arrays.sort(first);
        Arrays.sort(second);
        
        for(int i = 0 ; i < s.length() ; i++) {
            if(first[i] != second[i])
                return second[i];
        }               
        return second[t.length() - 1];
    }
}

public class Solution {
    public char findTheDifference(String s, String t) { //if not sure which one is longer
        int n = s.length();
        int m = t.length();
        int minLength = (n > m) ? m : n;
        char[] first = s.toCharArray();
        char[] second = t.toCharArray();
        
        Arrays.sort(first);
        Arrays.sort(second);
        
        for(int i = 0 ; i < minLength ; i++) {
            if(first[i] != second[i]) {
                if(minLength == n)
                    return second[i];
                else
                    return first[i];
            }
        }               
        return (n > m) ? first[n - 1] : second[m - 1];
    }
}

public class Solution {
    public char findTheDifference(String s, String t) {
        int n = s.length();
        int m = t.length();
        int minLength = (n > m) ? m : n;
        char[] first = s.toCharArray();
        char[] second = t.toCharArray();
        
        Arrays.sort(first);
        Arrays.sort(second);
        
        
        for(int i = 0 ; i < minLength ; i++) {
            if(first[i] != second[i]) {
                // System.out.println(first[i]);
                // System.out.println(second[i]);
                if(minLength == n)
                    return second[i];
                else
                    return first[i];
            }
        }               
        return (n > m) ? first[n - 1] : second[m - 1];
    }
}